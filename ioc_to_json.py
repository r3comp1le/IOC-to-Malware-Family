#Search IOC files and rip out Hashes with associated meta data.

import os
import re, sys
import argparse

#args
parser = argparse.ArgumentParser()
parser.add_argument('-d', action='store', dest='input', help='Directory')
parser.add_argument('-v', action='version', version='%(prog)s 2.0')
results = parser.parse_args()

try:
    theDir = results.input
except TypeError:
    print "Select a Directory to scan: -d"
    sys.exit(0)
    
regexmd5 = re.compile(ur'([a-f0-9]{32})')
title = ""
desc = ""
created = ""
last = ""
grop = ""
category = ""
family = []

#open each IOC
for filename in os.listdir(results.input):
    print "Searching: " + filename
    full_filename = theDir + "/" + filename
    with open(full_filename, 'r') as theIOC:
        data=theIOC.read()
        md5_reg = re.findall(regexmd5,data)
        title_reg = re.search(r'<short_description>(.*)</short_description>',data,re.M|re.I)
        desc_reg = re.search(r'<description>(.*)</description>',data,re.M|re.I)
        last_reg = re.search(r'last-modified=\"(.*)Z\">',data,re.M|re.I)
        created_reg = re.search(r'<authored_date>(.*)</authored_date>',data,re.M|re.I)
        grop_reg = re.search(r'<link rel=\"group\">(.*)</link>',data,re.M|re.I)
        category_reg = re.search(r'<link rel=\"category\">(.*)</link>',data,re.M|re.I)
        
        if title_reg:
            title = str(title_reg.group(1))
        if desc_reg:
            desc_1 = str(desc_reg.group(1))
            desc = desc_1.replace(",","")
        if created_reg:
            created = str(created_reg.group(1))
        if last_reg:
            last = str(last_reg.group(1))
        if grop_reg:
            grop = str(grop_reg.group(1))
        if category_reg:
            category = str(category_reg.group(1))
       
    md5_reg = list(set(md5_reg))

    for hashes in md5_reg:
        fam = {}
        #f.write(filename + "," + last + "," + title + "," + desc + "," + created + "," + category + "," + grop + "," + hashes + "\n")       
        fam['IOC_File'] = filename
        fam['Title'] = title
        fam['Description'] = desc
        fam['Created'] = created
        fam['Modified'] = last
        fam['Category'] = category
        fam['Group'] = grop
        fam['Hash'] = hashes

        family.append(fam)

with open('ioc.json', 'wb') as family_out:
    for f in family:
        family_out.write(str(f))
        family_out.write('\n')
family_out.close()
